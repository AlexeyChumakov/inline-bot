const sessionManager = require("../utils/sessionManager");

class OperatorHandlers {
  constructor(bot) {
    this.bot = bot;
    this.operatorId = process.env.OPERATOR_ID;
  }

  async startOperatorChat(ctx) {
    const userId = ctx.from.id;
    sessionManager.setOperatorMode(userId, true);

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
              callback_data: "end_operator_chat",
            },
          ],
        ],
      },
    };

    await ctx.editMessageText(
      "üßë‚Äçüí¨ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–¥—ë—Ç –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
      keyboard
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
    if (this.operatorId) {
      try {
        await this.bot.telegram.sendMessage(
          this.operatorId,
          `üîî –ù–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n\nID: ${userId}\n–ò–º—è: ${ctx.from.first_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\nUsername: @${ctx.from.username || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞.`
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É:", error);
      }
    }
  }

  async endOperatorChat(ctx) {
    const userId = ctx.from.id;
    sessionManager.setOperatorMode(userId, false);

    await ctx.editMessageText(
      "‚úÖ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —Å–Ω–æ–≤–∞."
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const mainMenuContent = require("../data/bot_content").main_menu;
    const { Markup } = require("telegraf");
    const buttons = mainMenuContent.buttons.map((btn) =>
      Markup.button.callback(btn.text, btn.callback)
    );
    const keyboard = Markup.inlineKeyboard(buttons, { columns: 1 });

    setTimeout(async () => {
      await ctx.reply(mainMenuContent.text, keyboard);
    }, 1000);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞
    if (this.operatorId) {
      try {
        await this.bot.telegram.sendMessage(
          this.operatorId,
          `üìù –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} (${ctx.from.first_name || "–ë–µ–∑ –∏–º–µ–Ω–∏"}) –∑–∞–≤–µ—Ä—à—ë–Ω.`
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É:", error);
      }
    }
  }

  async handleUserMessage(ctx) {
    const userId = ctx.from.id;

    if (!sessionManager.isOperatorMode(userId)) {
      return false; // –ù–µ –≤ —Ä–µ–∂–∏–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    }

    if (!this.operatorId) {
      await ctx.reply("‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return true;
    }

    try {
      const userInfo = `üë§ –û—Ç: ${ctx.from.first_name || "–ë–µ–∑ –∏–º–µ–Ω–∏"} (ID: ${userId})`;
      const message = ctx.message;

      if (message.text) {
        await this.bot.telegram.sendMessage(
          this.operatorId,
          `${userInfo}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message.text}`
        );
      } else if (message.photo) {
        await this.bot.telegram.sendPhoto(
          this.operatorId,
          message.photo[message.photo.length - 1].file_id,
          { caption: `${userInfo}\nüì∑ –§–æ—Ç–æ${message.caption ? ": " + message.caption : ""}` }
        );
      } else if (message.document) {
        await this.bot.telegram.sendDocument(
          this.operatorId,
          message.document.file_id,
          { caption: `${userInfo}\nüìé –î–æ–∫—É–º–µ–Ω—Ç${message.caption ? ": " + message.caption : ""}` }
        );
      } else if (message.video) {
        await this.bot.telegram.sendVideo(
          this.operatorId,
          message.video.file_id,
          { caption: `${userInfo}\nüìπ –í–∏–¥–µ–æ${message.caption ? ": " + message.caption : ""}` }
        );
      } else if (message.audio) {
        await this.bot.telegram.sendAudio(
          this.operatorId,
          message.audio.file_id,
          { caption: `${userInfo}\nüéµ –ê—É–¥–∏–æ${message.caption ? ": " + message.caption : ""}` }
        );
      } else if (message.voice) {
        await this.bot.telegram.sendVoice(
          this.operatorId,
          message.voice.file_id,
          { caption: `${userInfo}\nüó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ` }
        );
      } else if (message.sticker) {
        await this.bot.telegram.sendSticker(
          this.operatorId,
          message.sticker.file_id
        );
        await this.bot.telegram.sendMessage(
          this.operatorId,
          `${userInfo}\n‚ú® –°—Ç–∏–∫–µ—Ä`
        );
      } else {
        await this.bot.telegram.sendMessage(
          this.operatorId,
          `${userInfo}\n‚ùì –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.`
        );
      }

      await ctx.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }

    return true; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
  }

  async handleOperatorReply(ctx) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (ctx.from.id.toString() !== this.operatorId) {
      return false;
    }

    // –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    const text = ctx.message.text || ctx.message.caption || "";
    const userIdMatch = text.match(/ID:\s*(\d+)/);

    if (!userIdMatch) {
      await ctx.reply(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"ID: 123456789\""
      );
      return true;
    }

    const targetUserId = userIdMatch[1];
    const operatorMessagePrefix = `üßë‚Äçüí¨ –û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n\n`;

    try {
      const message = ctx.message;

      if (message.text) {
        await this.bot.telegram.sendMessage(
          targetUserId,
          `${operatorMessagePrefix}${message.text}`
        );
      } else if (message.photo) {
        await this.bot.telegram.sendPhoto(
          targetUserId,
          message.photo[message.photo.length - 1].file_id,
          { caption: `${operatorMessagePrefix}${message.caption || ""}` }
        );
      } else if (message.document) {
        await this.bot.telegram.sendDocument(
          targetUserId,
          message.document.file_id,
          { caption: `${operatorMessagePrefix}${message.caption || ""}` }
        );
      } else if (message.video) {
        await this.bot.telegram.sendVideo(
          targetUserId,
          message.video.file_id,
          { caption: `${operatorMessagePrefix}${message.caption || ""}` }
        );
      } else if (message.audio) {
        await this.bot.telegram.sendAudio(
          targetUserId,
          message.audio.file_id,
          { caption: `${operatorMessagePrefix}${message.caption || ""}` }
        );
      } else if (message.voice) {
        await this.bot.telegram.sendVoice(
          targetUserId,
          message.voice.file_id,
          { caption: `${operatorMessagePrefix}–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ` }
        );
      } else if (message.sticker) {
        await this.bot.telegram.sendSticker(
          targetUserId,
          message.sticker.file_id
        );
        await this.bot.telegram.sendMessage(
          targetUserId,
          `${operatorMessagePrefix}–°—Ç–∏–∫–µ—Ä`
        );
      } else {
        await ctx.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
        return true;
      }

      await ctx.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
    }

    return true;
  }
}

module.exports = OperatorHandlers;


